version: 0.2

env:
  variables:
    TERRAFORM_VERSION: 1.9.5

phases:
  install:
    commands:
      - echo "Installing Terraform, jq, and Git..."
      - wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_SHA256SUMS
      - sha256sum -c terraform_${TERRAFORM_VERSION}_SHA256SUMS --ignore-missing || { echo "Terraform checksum failed"; exit 1; }
      - unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - terraform --version
      - apt-get update && apt-get install -y jq git
      
  pre_build:
    commands:
      - rm -rf *
      - echo "ACCOUNT_ID ${CUSTOMER_ACCOUNT_ID}, ROLE ${CUSTOMER_ACCOUNT_ROLE_NAME}, REPO ${GITHUB_CUSTOMER_REPO}, COMMIT_ID ${CODEBUILD_RESOLVED_SOURCE_VERSION}, DYNAMODB ${DYNAMODB_TABLE_NAME}, S3_BUCKET ${S3_BUCKET_NAME}, STATE_FILE ${S3_STATE_FILE}"
      - echo "Retrieving GitHub secret from Secrets Manager..."
      - export SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id ${GITHUB_SECRET_NAME} --query SecretString --output text)
      - export GITHUB_TOKEN=$(echo $SECRET_VALUE | jq -r '.github_token')
      - export GITHUB_ORG=$(echo $SECRET_VALUE | jq -r '.github_org')
      - export GITHUB_CUSTOMER_REPO=$(echo $SECRET_VALUE | jq -r '.customer_github_repo')
      
      - echo "Cloning the Git repository..."
      - git clone "https://${GITHUB_TOKEN}@github.com/${GITHUB_ORG}/${GITHUB_CUSTOMER_REPO}.git" || { echo "Git clone failed"; exit 1; }
      - cd ${GITHUB_CUSTOMER_REPO}
      - git checkout ${CODEBUILD_RESOLVED_SOURCE_VERSION}

      - echo "Checking for changes in .tfvars files..."
      - export TFVARS_FILE=$(git diff-tree --no-commit-id --name-only -r ${CODEBUILD_RESOLVED_SOURCE_VERSION} | grep '\.tfvars$' || true)
      - echo "File identified ${TFVARS_FILE}"
      - if [ -n "$TFVARS_FILE" ]; then 
            export MODULE_PATH=$(dirname "$TFVARS_FILE"); 
            echo "Changes detected in .tfvars file. Setting MODULE_PATH to $MODULE_PATH";
        else 
            echo "No changes detected in .tfvars files. Exiting."; 
            exit 1; 
        fi
         
      - echo "Changing directory to ${MODULE_PATH}..."
      - cd ${MODULE_PATH}   
      - export S3_STATE_FILE_PATH="${CUSTOMER_ACCOUNT_ID}/${S3_STATE_FILE}"
      - echo "S3_STATE_FILE_PATH is $S3_STATE_FILE_PATH"
      
      - echo "Updating backend configuration..."
      - |
        cat > backend.tf <<EOF
        terraform {
          backend "s3" {
            bucket         = "${S3_BUCKET_NAME}"
            key            = "${S3_STATE_FILE_PATH}"
            region         = "${TERRAFORM_BACKEND_REGION}"
            dynamodb_table = "${DYNAMODB_TABLE_NAME}"
          }
        }
        EOF
      - echo "Updating provider configuration..."
      - |
        cat > provider.tf <<EOF
        provider "aws" {
          region = "${TERRAFORM_REGION}"

          assume_role {
            role_arn     = "arn:aws:iam::$CUSTOMER_ACCOUNT_ID:role/$CUSTOMER_ACCOUNT_ROLE_NAME"
            session_name = "terraform-session-account"
          }
        }
        EOF
      - echo "Initializing Terraform..."
      # terraform init || { echo "Terraform init failed"; exit 1; }

  build:
    commands:
      - echo "Planning Terraform deployment..."
      # terraform plan -out=tfplan || { echo "Terraform plan failed"; exit 1; }

  post_build:
    commands:
      - echo "Applying Terraform deployment..."
      # terraform apply -auto-approve tfplan || { echo "Terraform apply failed"; exit 1; }
      - echo "Terraform apply completed on `date`"

artifacts:
  files:
    - '**/*'
  discard-paths: yes
  base-directory: .
