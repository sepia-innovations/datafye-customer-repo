version: 0.2

phases:
  install:
    commands:
      - echo Installing Terraform...
      - wget https://releases.hashicorp.com/terraform/1.9.5/terraform_1.9.5_linux_amd64.zip
      - unzip terraform_1.9.5_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - terraform --version
      - echo Installing jq...
      - apt-get update && apt-get install -y jq
      - echo Installing Git...
      - apt-get install -y git

  pre_build:
    commands:
      - echo "Removing content in current directory..."
      - rm -rf *
      - echo "Retrieving and parsing github secret from Secrets Manager..."
      - export SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id ${GITHUB_SECRET_NAME} --query SecretString --output text)
      - export GITHUB_TOKEN=$(echo $SECRET_VALUE | jq -r '.githubToken')
      - export GITHUB_ORG=$(echo $SECRET_VALUE | jq -r '.githubOrg')
      - export GITHUB_CUSTOMER_REPO=$(echo $SECRET_VALUE | jq -r '.githubCustomerRepo')
      - echo "Cloning the Git repository..."
      - git clone "https://${GITHUB_TOKEN}@github.com/${GITHUB_ORG}/${GITHUB_CUSTOMER_REPO}.git"
      - cd ${GITHUB_CUSTOMER_REPO}
      - echo "CUSTOMER_ACCOUNT_ID is ${CUSTOMER_ACCOUNT_ID}"
      - echo "CUSTOMER_ACCOUNT_ROLE_NAME is ${CUSTOMER_ACCOUNT_ROLE_NAME}"
      - echo "S3_BUCKET_NAME is ${S3_BUCKET_NAME}"
      - echo "DYNAMODB_TABLE_NAME is ${DYNAMODB_TABLE_NAME}"
      - echo "S3_STATE_FILE is ${S3_STATE_FILE}"
      - echo "Checking out the commit ID ${CODEBUILD_RESOLVED_SOURCE_VERSION}"
      - git checkout ${CODEBUILD_RESOLVED_SOURCE_VERSION}

      # Check for changes in files ending with .tfvars
      - echo "Checking for changes in .tfvars files..."
      - export TFVARS_FILE=$(git diff-tree --no-commit-id --name-only -r ${CODEBUILD_RESOLVED_SOURCE_VERSION} | grep '\.tfvars$' || true)
      - echo "File identified ${TFVARS_FILE}"
      # If a .tfvars file is found, extract the parent directory and set MODULE_PATH
      - if [ -n "$TFVARS_FILE" ]; then 
            export MODULE_PATH=$(dirname "$TFVARS_FILE"); 
            echo "Changes detected in .tfvars file. Setting MODULE_PATH to $MODULE_PATH";
        else 
            echo "No changes detected in .tfvars files. Exiting."; 
            exit 1; 
        fi
      
      - ls -al
      
      - echo "Changing directory to ${MODULE_PATH}..."
      - cd ${MODULE_PATH}
      - export TFVARS_DIR=$(basename $(dirname "$TFVARS_FILE"))
      - echo "Parent directory for .tfvars file is $TFVARS_DIR"
      - export MODIFIED_S3_STATE_FILE=$(echo "$S3_STATE_FILE" | sed "s|\.tfstate$|-$TFVARS_DIR.tfstate|")
      - echo "Modified S3_STATE_FILE is $MODIFIED_S3_STATE_FILE"
      - echo "Updating backend configuration..."
      - |
        cat > backend.tf <<EOF
        terraform {
          backend "s3" {
            bucket         = "${S3_BUCKET_NAME}"
            key            = "${MODIFIED_S3_STATE_FILE}"
            region         = "${AWS_REGION}"
            dynamodb_table = "${DYNAMODB_TABLE_NAME}"
          }
        }
        EOF
      - echo "Contents of backend.tf:"
      - cat backend.tf
      - echo "Updating provider configuration..."
      - |
        cat > provider.tf <<EOF
        provider "aws" {
          region = "${AWS_REGION}"

          assume_role {
            role_arn     = "arn:aws:iam::$CUSTOMER_ACCOUNT_ID:role/$CUSTOMER_ACCOUNT_ROLE_NAME"
            session_name = "terraform-session-account2"
          }
        }
        EOF
      - echo "Contents of provider.tf:"
      - cat provider.tf
      - echo "Initializing Terraform..."
      - terraform init

  build:
    commands:
      - |
        if [ -z "$CUSTOMER_ACCOUNT_ID" ]; then echo "CUSTOMER_ACCOUNT_ID is not set. Exiting." && exit 1; fi
        if [ -z "$CUSTOMER_ACCOUNT_ROLE_NAME" ]; then echo "CUSTOMER_ACCOUNT_ROLE_NAME is not set. Exiting." && exit 1; fi
      - echo "Planning Terraform deployment..."
      - terraform plan -out=tfplan

  post_build:
    commands:
      - echo "Applying Terraform deployment..."
      - terraform apply -auto-approve tfplan
      - echo "Terraform apply completed on `date`"

artifacts:
  files:
    - '**/*'
  discard-paths: yes
  base-directory: .
